  
  <style>

  .star-rating .fa-star {
    cursor: pointer;
    color: #ccc;
  }
  .star-rating .fa-star.text-warning {
    color: #ffc107;
  }
    .pagination-controls {
      display: flex;
      justify-content: center;
      align-items: center;
      margin-top: 20px;
    }
  
    .pagination-controls button {
      margin: 0 10px;
    }
  
    #page-info {
      font-weight: bold;
    }
  
    .tm-status-circle {
      display: inline-block;
      margin-right: 5px;
      width: 10px;
      height: 10px;
      border-radius: 50%;
    }
  
    .tm-status-circle.cancelled { background-color: #dc3545; }
    .tm-status-circle.moving { background-color: #28a745; }
    .tm-status-circle.pending { background-color: #ffc107; }
  </style>

<div class="container mt-5">
  <% if (orders.length > 0) { %> <% orders.forEach(order => { %>
  <%if(order.paymentStatus === "failed"){%>
  <div
    class="row p-3 mb-3 border bg-white d-flex justify-content-between align-items-center"
  >
    <div class="d-flex align-items-center col-md-10">
      <div class="col-md-2 mr-3">
        <img
          src="/uploads/assets/paymentFailed.png"
          alt="Product Image"
          class="img-fluid product-image"
        />
      </div>
      <div class="col-md-7 mr-3">
        <p><b>Order id: <%=order.orderId%></b></p>
        <p><b>Total Quantity: <%= order .totalQuantity %></b></p>
        <b>
          <div class="tm-status-circle cancelled"></div>
          Payment: <%= order.paymentStatus %>
        </b>

        <%if(order.coupon){%>
        <p>
          coupon applyed. code: <b><%= order.coupon.couponCode %></b> discount:
          <b><%= order.coupon.offerAmount %></b>
        </p>
        <%}%>
      </div>
      <div class="col-md-2">
        <p><b>₹ <%= order.totalPrice %></b></p>
      </div>
    </div>
    <div class="d-flex flex-column">
      <a href="/failedOrder-view/<%= order._id %>">
        <button class="btn btn-primary mb-2 w-100">View</button>
      </a>
      <burtton
        class="btn btn-primary w-100 repaymentBtn"
        data-amount="<%=order.totalPrice%>"
        data-id="<%=order._id%>"
      >
        Repayment</burtton
      >
    </div>
  </div>
  <%}%> <%})%>

  <h2 class="mb-4">Your Orders</h2>
  <div id="paginated-orders" data-orders='<%= JSON.stringify(orders.filter(order => order.paymentStatus !== "failed").flatMap(order => order.products.map(product => ({
    orderId: order.orderId,
    productName: product.productId.name,
    status: product.status,
    size: product.size.size,
    totalPrice: product.totalPrice,
    productId: product._id,
    product_id: product.productId._id,
    order_id: order._id,
    coupon: order.coupon,
    couponDiscount: order.couponDiscount || 0,
    imagePath: product.productId.imagePaths[0]
  })))) %>'>
    <!-- Paginated orders will be inserted here by JavaScript -->
  </div>

  <div class="pagination-controls">
    <button id="prev-page" class="btn btn-secondary">Previous</button>
    <span id="page-info"></span>
    <button id="next-page" class="btn btn-secondary">Next</button>
  </div>
<% } else { %>
  <div id="no-address-alert" class="alert alert-warning text-center" role="alert">
    No Order found!
  </div>
<% } %>
</div>


<!-- Review Modal -->
<div
  class="modal fade"
  id="reviewModal"
  tabindex="-1"
  aria-labelledby="reviewModalLabel"
  aria-hidden="true"
>
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="reviewModalLabel">Write a Review</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        <div class="star-rating mb-3">
          <i class="fas fa-star" data-rating="1"></i>
          <i class="fas fa-star" data-rating="2"></i>
          <i class="fas fa-star" data-rating="3"></i>
          <i class="fas fa-star" data-rating="4"></i>
          <i class="fas fa-star" data-rating="5"></i>
        </div>
        <div class="mb-3">
          <label for="reviewText" class="form-label"
            >Your Review (minimum 5 sentences):</label
          >
          <textarea class="form-control" id="reviewText" rows="5"></textarea>
        </div>
        <div id="errorMessage" class="text-danger"></div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary btn-close" data-bs-dismiss="modal">
          Close
        </button>
        <button type="button" class="btn btn-primary" id="submitReview">
          Submit Review
        </button>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script
  src="https://kit.fontawesome.com/your-fontawesome-kit.js"
  crossorigin="anonymous"
></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<!-- pagination  -->
<script>
  // Pagination variables and functions
let orders = [];
const itemsPerPage = 3;
let currentPage = 1;

function renderOrders(page) {
  const startIndex = (page - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const paginatedOrders = orders.slice(startIndex, endIndex);

  const orderContainer = document.getElementById('paginated-orders');
  orderContainer.innerHTML = '';

  paginatedOrders.forEach(order => {
    const orderElement = document.createElement('div');
    orderElement.className = 'row p-3 mb-3 border bg-white d-flex justify-content-between align-items-center';
    orderElement.innerHTML = `
      <div class="d-flex align-items-center col-md-10">
        <div class="col-md-2 mr-3">
          <img src="${order.imagePath}" alt="Product Image" class="img-fluid product-image" />
        </div>
        <div class="col-md-7 mr-3">
          <p><b>${order.productName}</b></p>
          <p>
            <b>
              <div class="tm-status-circle ${getStatusClass(order.status)}"></div>
              ${order.status.charAt(0).toUpperCase() + order.status.slice(1)}
            </b>
          </p>
          <b>Size: ${order.size}</b>
          ${order.coupon ? `
            <p>
              coupon applied. code: <b>${order.coupon.couponCode}</b> discount:
              <b>${order.coupon.offerAmount}</b>
            </p>
          ` : ''}
        </div>
        <div class="col-md-2">
          <p><b>₹ ${order.totalPrice}</b></p>
        </div>
      </div>
      <div class="d-flex flex-column">
        <a href="/order-view/${order.productId}/${order.orderId}">
          <button class="btn btn-primary mb-2 w-100">View</button>
        </a>
        ${order.status.toLowerCase() === "delivered" ? `
          <button class="btn btn-primary w-100 reviewBtn" data-product-id="${order.product_id}" data-order-id="${order.order_id}">
            Review
          </button>
        ` : ''}
      </div>
    `;
    orderContainer.appendChild(orderElement);
  });

  updatePaginationControls();
}

function getStatusClass(status) {
  switch(status.toLowerCase()) {
    case 'canceled':
    case 'returned':
    case 'return rejected':
      return 'cancelled';
    case 'delivered':
      return 'moving';
    default:
      return 'pending';
  }
}

function updatePaginationControls() {
  const prevButton = document.getElementById('prev-page');
  const nextButton = document.getElementById('next-page');
  const pageInfo = document.getElementById('page-info');

  prevButton.disabled = currentPage === 1;
  nextButton.disabled = currentPage === Math.ceil(orders.length / itemsPerPage);

  pageInfo.textContent = `Page ${currentPage} of ${Math.ceil(orders.length / itemsPerPage)}`;
}

// Review modal variables and functions
let selectedRating = 0;
let currentProductId = null;
const body = {};
let reviewModal;
let stars;
const submitButton = document.getElementById("submitReview");
const errorMessage = document.getElementById("errorMessage");

function initReviewModal() {
  reviewModal = new bootstrap.Modal(document.getElementById("reviewModal"));
  const starRating = document.querySelector(".star-rating");
  stars = starRating.querySelectorAll(".fa-star");

  // Star rating functionality
  stars.forEach((star) => {
    star.addEventListener("click", function () {
      body.rating = parseInt(this.dataset.rating);
      stars.forEach((s, index) => {
        s.classList.toggle("text-warning", index < body.rating);
      });
    });
  });

  // Submit review
  submitButton.addEventListener("click", submitReview);

  // Reset modal when it's closed
  document.getElementById("reviewModal").addEventListener("hidden.bs.modal", resetReviewModal);

  // Close modal on cancel button click
  document.querySelectorAll(".btn-close").forEach((button) => {
    button.addEventListener("click", () => reviewModal.hide());
  });

  // Hide modal on clicking the close button in the footer
  document.querySelector(".btn-secondary").addEventListener("click", () => reviewModal.hide());
}

async function submitReview() {
  const reviewText = document.getElementById("reviewText").value;
  const words = reviewText.split(/\s+/).filter((word) => word.trim().length > 0);

  if (!body.rating || body.rating === 0) {
    errorMessage.textContent = "Please select a star rating.";
    return;
  }

  if (words.length < 2) {
    errorMessage.textContent = "Please write at least 2 words.";
    return;
  }

  errorMessage.textContent = "";
  body.Description = reviewText;
console.log("body",body);
  try {
    const response = await fetch("/submit-review", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(body),
    });
    if (response.ok) {
      reviewModal.hide();
      Swal.fire({
        title: "Success!",
        text: "Your review has been submitted successfully.",
        icon: "success",
      });
    } else {
      const data = await response.json();
      errorMessage.textContent = `${data.error}`;
    }
  } catch (error) {
    console.error("Error submitting review:", error);
    errorMessage.textContent = "An error occurred while submitting the review.";
  }
}

function resetReviewModal() {
  selectedRating = 0;
  body.rating = 0;
  body.product = null;
  body.order = null;
  stars.forEach((s) => s.classList.remove("text-warning"));
  document.getElementById("reviewText").value = "";
  errorMessage.textContent = "";
}

// Event listeners and initialization
document.addEventListener("DOMContentLoaded", function() {
  const ordersData = document.getElementById('paginated-orders').dataset.orders;
  orders = JSON.parse(ordersData);

  renderOrders(currentPage);

  document.getElementById('prev-page').addEventListener('click', () => {
    if (currentPage > 1) {
      currentPage--;
      renderOrders(currentPage);
    }
  });

  document.getElementById('next-page').addEventListener('click', () => {
    if (currentPage < Math.ceil(orders.length / itemsPerPage)) {
      currentPage++;
      renderOrders(currentPage);
    }
  });

  // Initialize review modal
  initReviewModal();

  // Event delegation for review buttons
  document.getElementById('paginated-orders').addEventListener('click', function(event) {
    if (event.target.classList.contains('reviewBtn')) {
      body.product = event.target.dataset.productId;
      body.order = event.target.dataset.orderId;
      reviewModal.show();
    }
  });
});
</script>


<!-- save backend  -->
<script>
  async function saveOrderRazor(amount, orderId, razorResponse) {
    try {
      const response = await fetch("/repayment", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ amount, orderId }),
      });

      const data = await response.json();

      const verifyData = await fetch("/razor-verify", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ ...razorResponse, orderId }),
      });

      if (response.ok) {
        Swal.fire({
          title: `payment successfully completed ₹${amount}`,
          icon: "success",
          confirmButtonColor: "#3085d6",
          confirmButtonText: "OK",
        }).then(() => {
          window.location.reload();
        });
      } else {
        throw new Error("Verification failed");
      }
    } catch (error) {
      Swal.fire({
        title: "Error",
        text: error.message || "Something went wrong",
        icon: "error",
      });
    }
  }
</script>

<!-- repayment  -->
<script>
  document.querySelectorAll(".repaymentBtn").forEach((btn) => {
    btn.addEventListener("click", async function () {
      const amount = this.dataset.amount;
      const orderId = this.dataset.id;

      try {
        const keyResponse = await fetch("/razor-key");
        const { key } = await keyResponse.json();

        const orderResponse = await fetch("/razor-order", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ amount }),
        });
        const { order } = await orderResponse.json();

        const options = {
          key,
          amount: amount * 100,
          currency: "INR",
          name: "KARMA",
          description: "order repayment ",
          image: "img/fav.png",
          order_id: order.id,
          handler: function (response) {
            saveOrderRazor(amount, orderId, response);
          },
          prefill: {
            name: "John Doe",
            email: "john@example.com",
            contact: "9000090000",
          },
          theme: { color: "#1818c4" },
        };

        const razorpay = new Razorpay(options);
        razorpay.open();
      } catch (error) {
        Swal.fire({
          title: "Error",
          text: "Failed to initiate payment",
          icon: "error",
        });
      }
    });
  });
</script>
