<!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script> -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<style>
    .green-text {
  color: rgb(0, 179, 0);
}

.red-text {
  color: red;
}
</style>
<div class="container mt-5">
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h2 class="mb-0">My Wallet</h2>
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addMoneyModal">Add Money</button>
        </div>
        <div class="card-body">
            <div class="bg-light p-3 mb-3">
                <h5 class="mb-0">
                    <img src="/uploads/assets/wallet.png" alt="Wallet" style="width: 50px;">
                    <span class="walletBalance">Balance: ₹<%= wallet?.balance?.toFixed(2) || '0.00' %></span>
                </h5>
            </div>
            <h5>History</h5>
            <% if (wallet && wallet.transactions && wallet.transactions.length > 0) { %>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Amount</th>
                            <th>Type</th>
                            <th>Info</th>
                        </tr>
                    </thead>
                    <tbody id="transactionTable">
                        <% wallet.transactions.forEach((transaction) => { %>
                            <tr>
                                <td><%= transaction.createdAt.toDateString() %></td>
                                <td>₹<%= transaction.amount.toFixed(2) %></td>
                                <td class="<%= transaction.type === 'credit' ? 'green-text' : 'red-text' %>">
                                    <%= transaction.type %>
                                  </td>
                                <td><%= transaction.description %></td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            <% } else { %>
                <p id="noHistoryMessage" class="text-muted">No history found</p>
            <% } %>
        </div>
    </div>
</div>

<!-- Add Money Modal -->
<div class="modal fade" id="addMoneyModal" tabindex="-1" aria-labelledby="addMoneyModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addMoneyModalLabel">Add Money to Wallet</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addMoneyForm">
                    <div class="mb-3">
                        <label for="amount" class="form-label">Amount (₹)</label>
                        <input type="number" name="amount" class="form-control" id="amount" required min="1" step="0.01">
                        <div class="invalid-feedback">
                            Please enter a valid amount (greater than 0).
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary">Add Money</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const addMoneyForm = document.getElementById('addMoneyForm');
    const amountInput = document.getElementById('amount');
    const transactionTable = document.getElementById('transactionTable');
    const balanceElement = document.querySelector('.walletBalance');
    const noHistoryMessage = document.getElementById('noHistoryMessage');
    const addMoneyModal = document.getElementById('addMoneyModal');

    function updateFrontend(amount) {
        const currentBalance = parseFloat(balanceElement.textContent.split('₹')[1]);
        const newBalance = currentBalance + amount;
        balanceElement.textContent = `Balance: ₹${newBalance.toFixed(2)}`;

        const newRow = transactionTable.insertRow(0);
        newRow.innerHTML = `
            <td>${new Date().toLocaleDateString()}</td>
            <td class="credit">₹${amount.toFixed(2)}</td>
            <td class="credit" >Credit</td>
            <td>Wallet Recharged</td>
        `;

        if (noHistoryMessage) {
            noHistoryMessage.remove();
        }

        // Hide the modal
        const modal = bootstrap.Modal.getInstance(addMoneyModal);
        if (modal) {
            modal.hide();
        }
    }

    async function saveOrderRazor(amount, razorResponse) {
        try {
            const response = await fetch("/addMoney-wallet", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ amount })
            });

            const data = await response.json();

            const verifyData = await fetch("/razor-verify", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ wallet: true, ...razorResponse })
            });

            if (verifyData.ok) {
                Swal.fire({
                    title: `Wallet Recharged ₹${amount}`,
                    icon: "success",
                    confirmButtonColor: "#3085d6",
                    confirmButtonText: "OK"
                }).then(() => {
                    updateFrontend(amount);
                });
            } else {
                throw new Error("Verification failed");
            }
        } catch (error) {
            console.error(error);
            Swal.fire({
                title: "Error",
                text: error.message || "Something went wrong",
                icon: "error"
            });
        }
    }

        addMoneyForm.addEventListener("submit", async function(event) {
            event.preventDefault();
            const amount = parseFloat(amountInput.value);

            if (isNaN(amount) || amount <= 0) {
                amountInput.classList.add('is-invalid');
                return;
            }

            amountInput.classList.remove('is-invalid');

            try {
                const keyResponse = await fetch("/razor-key");
                const { key } = await keyResponse.json();

                const orderResponse = await fetch("/razor-order", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ amount })
                });
                const { order } = await orderResponse.json();

                const options = {
                    key,
                    amount: amount * 100,
                    currency: "INR",
                    name: "KARMA",
                    description: "Wallet Recharge",
                    image: "img/fav.png",
                    order_id: order.id,
                    handler: function(response) {
                        saveOrderRazor(amount, response);
                    },
                    prefill: {
                        name: "John Doe",
                        email: "john@example.com",
                        contact: "9000090000"
                    },
                    theme: { color: "#1818c4" }
                };

                const razorpay = new Razorpay(options);
                razorpay.open();
            } catch (error) {
                console.error(error);
                Swal.fire({
                    title: "Error",
                    text: "Failed to initiate payment",
                    icon: "error"
                });
            }
        });
    });
</script>