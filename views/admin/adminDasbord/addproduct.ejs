<%- include('../admin-partials/header'); %>

<div class="container tm-mt-big tm-mb-big">
  <div class="row">
    <div class="col-lg col-md-12 col-sm-12 mx-auto">
      <div class="row">
        <div class="col-12">
          <h2 class="tm-block-title d-inline-block" style="width: fit-content">
            Add Product
          </h2>
          <% if(successMessage && successMessage.length > 0) { %>
          <script>
            Swal.fire({
              text: `<%= successMessage %>`,
              icon: "success",
              showCancelButton: false,
              confirmButtonColor: "#3085d6",
              confirmButtonText: "OK",
            }).then((result) => {
              if (result.isConfirmed) {
                window.location.href = "/admin/products";
              }
            });
          </script>
          <% } %> <% if(errorMessage && errorMessage.length > 0) { %>
          <script>
            Swal.fire({
              title: "OOPS...",
              text: `<%= errorMessage %>`,
              icon: "error",
            });
          </script>
          <% } %>
        </div>
      </div>
      <!-- First Row: Photos -->
      <form
        id="addProductForm"
        action="/admin/add-product"
        method="post"
        enctype="multipart/form-data"
      >
        <!-- Product Images -->
        <label for="image">Image:</label><br />
        <input
          type="file"
          id="images"
          name="images"
          accept="image/*"
          multiple...
          onchange="displaySelectedImages(this)"
        />
        <div
          class="selected-images-container"
          id="selectedImagesContainer"
        ></div>
        <span class="error-message" id="images-error" style="color: red"></span
        ><br />
        <hr />
        <!-- Second Row: General Information -->
        <div class="row tm-edit-product-row">
          <div class="col-lg-6 col-md-6 col-sm-12">
            <div class="form-group mb-3">
              <div class="d-flex justify-content-between">
                <label for="name" style="color: white">Product Name</label>
                <span id="title-available1" class="font-size-bold"></span>
              </div>
              <input
                id="name"
                name="name"
                type="text"
                class="form-control validate"
                style="background-color: white; color: black"
                oninput="clearError('name-error')"
              />
              <div
                class="error-message"
                id="name-error"
                style="color: red"
              ></div>
            </div>
          </div>
          <div class="col-lg-6 col-md-6 col-sm-12">
            <div class="form-group mb-3">
              <label for="basePrice" style="color: white">Base Price</label>
              <input
                id="basePrice"
                name="basePrice"
                type="number"
                class="form-control validate"
                style="background-color: white; color: black"
                oninput="clearError('basePrice-error')"
              />
              <div
                class="error-message"
                id="basePrice-error"
                style="color: red"
              ></div>
            </div>
          </div>
        </div>
        <hr />
        <!-- Third Row: Description and tag-->
        <div class="row tm-edit-product-row">
          <div class="col-lg-6 col-md-6 col-sm-12">
            <div class="form-group mb-3">
              <label for="tag" style="color: white">Tag</label>
              <select
                class="custom-select tm-select-accounts"
                id="tag"
                 name="tag"
                style="background-color: white; color: black"
                onchange="clearError('tag-error')"
              >
                <option selected value="Select tag">Select tag</option>
                <% tags.forEach((tag) => { %> <%if(tag.isActive){%>
                <option value="<%= tag._id %>"><%=tag.tagName%></option>
                <%}%> <% }); %>
              </select>
              <div
                id="tag-error"
                class="error-message"
                style="color: red"
              ></div>
            </div>
          </div>
          <div class="col-lg-6 col-md-6 col-sm-12">
            <div class="form-group mb-3">
              <label for="description" style="color: white">Description</label>
              <textarea
                class="form-control validate"
                rows="2"
                id="description"
                name="description"
                style="background-color: white; color: black"
                oninput="clearError('description-error')"
              ></textarea>
              <div
                class="error-message"
                id="description-error"
                style="color: red"
              ></div>
            </div>
          </div>
        </div>
        <hr />
        <!-- Fourth Row: Brand, Category, Weight -->
        <div class="row tm-edit-product-row">
          <div class="col-lg-4 col-md-4 col-sm-12">
            <div class="form-group mb-3">
              <label for="brand" style="color: white">Brand</label>
              <select
                class="custom-select tm-select-accounts"
                id="brand"
                name="brand"
                style="background-color: white; color: black"
                onchange="clearError('brand-error')"
              >
                <option selected value="Select brand">Select brand</option>
                <% brands.forEach((brand) => { %> <%if(brand.isActive){%>
                <option value="<%= brand._id %>"><%=brand.name%></option>
                <%}%> <% }); %>
              </select>
              <div
                id="brand-error"
                class="error-message"
                style="color: red"
              ></div>
            </div>
          </div>
          <div class="col-lg-4 col-md-4 col-sm-12">
            <div class="form-group mb-3">
              <label for="category" style="color: white">Category</label>
              <select
                class="custom-select tm-select-accounts"
                id="category"
                name="category"
                style="background-color: white; color: black"
                onchange="clearError('category-error')"
              >
                <option selected value="Select category">
                  Select category
                </option>
                <% categories.forEach((category) => { %>
                <%if(category.isActive){%>
                <option value="<%= category._id %>"><%=category.name%></option>
                <%}%> <% }); %>
              </select>
              <div
                id="category-error"
                class="error-message"
                style="color: red"
              ></div>
            </div>
          </div>
          <div class="col-lg-4 col-md-4 col-sm-12">
            <div class="form-group mb-3">
              <label for="weight" style="color: white">Weight (gm)</label>
              <input
                id="weight"
                name="weight"
                type="number"
                class="form-control validate"
                style="background-color: white; color: black"
                oninput="clearError('weight-error')"
              />
              <div
                id="weight-error"
                class="error-message"
                style="color: red"
              ></div>
            </div>
          </div>
        </div>
        <hr />
        <!-- Fifth Row: Midsole Drop, Heel, ForeFoot -->
        <div class="row tm-edit-product-row">
          <div class="col-lg-4 col-md-4 col-sm-12">
            <div class="form-group mb-3">
              <label for="midsoleDrop" style="color: white"
                >Midsole Drop (mm)</label
              >
              <input
                id="midsoleDrop"
                name="midsoleDrop"
                type="number"
                class="form-control validate"
                style="background-color: white; color: black"
                oninput="clearError('midsoleDrop-error')"
              />
              <div
                id="midsoleDrop-error"
                class="error-message"
                style="color: red"
              ></div>
            </div>
          </div>
          <div class="col-lg-4 col-md-4 col-sm-12">
            <div class="form-group mb-3">
              <label for="heel" style="color: white">Heel (mm)</label>
              <input
                id="heel"
                name="heel"
                type="number"
                class="form-control validate"
                style="background-color: white; color: black"
                oninput="clearError('heel-error')"
              />
              <div
                id="heel-error"
                class="error-message"
                style="color: red"
              ></div>
            </div>
          </div>
          <div class="col-lg-4 col-md-4 col-sm-12">
            <div class="form-group mb-3">
              <label for="foreFoot" style="color: white">ForeFoot (mm)</label>
              <input
                id="foreFoot"
                name="foreFoot"
                type="number"
                class="form-control validate"
                style="background-color: white; color: black"
                oninput="clearError('foreFoot-error')"
              />
              <div
                id="foreFoot-error"
                class="error-message"
                style="color: red"
              ></div>
            </div>
          </div>
        </div>
        <hr />
        <!-- Sixth Row: Offer Amount and Expiry Date -->
        <h3 style="text-align: center; color: rgb(59, 59, 59)">
          <b>If your product have any discount you can add that here</b>
        </h3>
        <hr />

        <div class="row tm-edit-product-row">
          <div class="col-lg-6 col-md-6 col-sm-12">
            <div class="form-group mb-3">
              <label for="offerAmount" style="color: white">Offer Amount</label>
              <input
                id="offerAmount"
                name="offerAmount"
                type="number"
                class="form-control validate"
                style="background-color: white; color: black"
                oninput="clearError('offerAmount-error')"
              />
              <div
                id="offerAmount-error"
                class="error-message"
                style="color: red"
              ></div>
            </div>
          </div>
          <div class="col-lg-6 col-md-6 col-sm-12">
            <div class="form-group mb-3">
              <label for="offerExpiryDate" style="color: white"
                >Offer Expiry Date</label
              >
              <input
                id="offerExpiryDate"
                name="offerExpiryDate"
                type="date"
                class="form-control validate"
                style="background-color: white; color: black"
                oninput="clearError('offerExpiryDate-error')"
              />
              <div
                id="offerExpiryDate-error"
                class="error-message"
                style="color: red"
              ></div>
            </div>
          </div>
        </div>
        <hr />
        <!-- Seventh Row: Variant -->
        <div class="mb-3 d-flex justify-content-end">
          <button
            onclick="addVariant()"
            type="button"
            class="btn btn-warning my-3 px-5 py-2 text-white font-size-bold"
          >
            Add Variant
          </button>
        </div>
        <div class="container" id="variants-container">
          <div class="row variant border rounded-3 mb-3">
            <div class="col-sm-3 col-md-5 py-2">
              <select
                class="custom-select tm-select-accounts"
                name="size[]"
                style="background-color: white; color: black"
              >
                <option value="" disabled selected>Select a size</option>
                <% sizes.forEach((size) => { %>
                <option value="<%= size._id %>"><%= size.size %></option>
                <% }); %>
              </select>
            </div>
            <div class="col-sm-3 col-md-5 py-2">
              <input
                type="number"
                placeholder="Enter quantity"
                class="form-control bg-white font-size quantity m-0"
                id="quantity"
                name="quantity[]"
                style="color: black"
                oninput="validateInputQty(this)"
              />
              <div id="variants-error" class="error-message" style="color: red"></div>
            </div>
        
            <div class="col-sm-1 col-md-1 py-2 text-center">
              <button
                type="button"
                onclick="removeVariant(this)"
                class="btn btn-outline-danger m-0 font-size-bold"
              >
                X
              </button>
            </div>
          </div>
        </div>
        <hr />
        <!-- Submit -->
        <div class="col-12">
          <button
            id="submit-btn"
            type="submit"
            class="btn btn-primary text-uppercase px-5 py-2"
          >
            Add Product
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script src="/adminpublic/cropper/cropper.min.js"></script>

<script>
 const form = document.getElementById("addProductForm");
const errorMessages = {
  name: "Please enter a valid product name (no special characters allowed).",
  basePrice: "Please enter a valid base price (0 or greater).",
  description: "Please enter a description.",
  brand: "Please select a brand.",
  tag: "Please select a tag.",
  category: "Please select a category.",
  weight: "Please enter a valid weight (greater than 0).",
  midsoleDrop: "Please enter a valid midsole drop (greater than 0).",
  heel: "Please enter a valid heel height (greater than 0).",
  foreFoot: "Please enter a valid forefoot height (greater than 0).",
  images: "Please upload at least one image file (jpg, jpeg or png only).",
  offerAmount: "Please enter a valid offer amount (greater than 0 and not exceeding the base price).",
  offerExpiryDate: "Please enter an offer expiry date.",
  variants: "Please ensure all variant fields are filled, quantities are greater than 0, and sizes are not duplicated.",
};

function clearError(errorId) {
  document.getElementById(errorId).innerText = "";
}

function validateImageFile(file) {
  const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];
  return validTypes.includes(file.type);
}

function validateVariants() {
  const variantContainers = document.querySelectorAll('#variants-container .variant');
  const sizes = new Set();
  let isValid = true;
  let errorMessage = '';

  variantContainers.forEach((container, index) => {
    const sizeSelect = container.querySelector('select[name="size[]"]');
    const quantityInput = container.querySelector('input[name="quantity[]"]');
    
    if (!sizeSelect.value || !quantityInput.value) {
      isValid = false;
      errorMessage = 'All variant fields must be filled.';
      return;
    }

    const quantity = parseInt(quantityInput.value, 10);
    if (isNaN(quantity) || quantity <= 0) {
      isValid = false;
      errorMessage = 'Quantity must be greater than 0 for all variants.';
      return;
    }

    if (sizes.has(sizeSelect.value)) {
      isValid = false;
      errorMessage = 'Duplicate sizes are not allowed in variants.';
      return;
    }

    sizes.add(sizeSelect.value);
  });

  return { isValid, errorMessage };
}

form.addEventListener("submit", function (event) {
  let valid = true;

  const name = document.getElementById("name").value.trim();
  const basePrice = parseFloat(document.getElementById("basePrice").value.trim());
  const description = document.getElementById("description").value.trim();
  const brand = document.getElementById("brand").value;
  const tag = document.getElementById("tag").value;
  const category = document.getElementById("category").value;
  const weight = document.getElementById("weight").value.trim();
  const midsoleDrop = document.getElementById("midsoleDrop").value.trim();
  const heel = document.getElementById("heel").value.trim();
  const foreFoot = document.getElementById("foreFoot").value.trim();
  const images = document.getElementById("images").files;
  const offerAmount = parseFloat(document.getElementById("offerAmount").value.trim());
  const offerExpiryDate = document.getElementById("offerExpiryDate").value.trim();

  // Reset error messages
  document.querySelectorAll(".error-message").forEach((element) => (element.innerHTML = ""));

  // Name validation
  if (!name || /[^a-zA-Z0-9\s]/.test(name)) {
    valid = false;
    document.getElementById("name-error").innerText = errorMessages.name;
  }

  // Base price validation
  if (isNaN(basePrice) || basePrice <= 0) {
    valid = false;
    document.getElementById("basePrice-error").innerText = errorMessages.basePrice;
  }

  // Description validation
  if (!description) {
    valid = false;
    document.getElementById("description-error").innerText = errorMessages.description;
  }

  // Brand validation
  if (!brand || brand === "Select brand") {
    valid = false;
    document.getElementById("brand-error").innerText = errorMessages.brand;
  }

  // Tag error
  if (!tag || tag === "Select tag") {
    valid = false;
    document.getElementById("tag-error").innerText = errorMessages.tag;
  }

  // Category validation
  if (!category || category === "Select category") {
    valid = false;
    document.getElementById("category-error").innerText = errorMessages.category;
  }

  // Weight validation
  if (!weight || isNaN(weight) || weight <= 0) {
    valid = false;
    document.getElementById("weight-error").innerText = errorMessages.weight;
  }

  // Midsole drop validation
  if (!midsoleDrop || isNaN(midsoleDrop) || midsoleDrop <= 0) {
    valid = false;
    document.getElementById("midsoleDrop-error").innerText = errorMessages.midsoleDrop;
  }

  // Heel height validation
  if (!heel || isNaN(heel) || heel <= 0) {
    valid = false;
    document.getElementById("heel-error").innerText = errorMessages.heel;
  }

  // Forefoot height validation
  if (!foreFoot || isNaN(foreFoot) || foreFoot <= 0) {
    valid = false;
    document.getElementById("foreFoot-error").innerText = errorMessages.foreFoot;
  }

  // Image validation
  if (!images.length) {
    valid = false;
    document.getElementById("images-error").innerText = errorMessages.images;
  } else {
    for (let i = 0; i < images.length; i++) {
      if (!validateImageFile(images[i])) {
        valid = false;
        document.getElementById("images-error").innerText = errorMessages.images;
        break;
      }
    }
  }
  console.log("offer",offerAmount);

  // Offer amount validation
  if (offerAmount) {
    if (isNaN(offerAmount) || offerAmount <= 0 || offerAmount > basePrice) {
      valid = false;
      document.getElementById("offerAmount-error").innerText = errorMessages.offerAmount;
    }
    // Offer expiry date validation if offer amount is provided
    if (!offerExpiryDate) {
      valid = false;
      document.getElementById("offerExpiryDate-error").innerText = errorMessages.offerExpiryDate;
    }
  }

  // Variants validation
  const variantValidation = validateVariants();
  if (!variantValidation.isValid) {
    valid = false;
    document.getElementById("variants-error").innerText = variantValidation.errorMessage;
  }

  if (!valid) {
    event.preventDefault();
  }
});

// Add this function to dynamically validate quantity inputs
function validateInputQty(input) {
  const quantity = parseInt(input.value, 10);
  if (isNaN(quantity) || quantity < 1) {
    input.setCustomValidity("Please enter a quantity greater than 0.");
    input.reportValidity();
  } else {
    input.setCustomValidity("");
  }
}
</script>


<script>
   function displaySelectedImages(input) {
    const selectedImagesContainer = document.getElementById("selectedImagesContainer");
    selectedImagesContainer.innerHTML = "";

    for (let i = 0; i < input.files.length; i++) {
      const file = input.files[i];
      const reader = new FileReader();
      const cropContainer = document.createElement("div");
      cropContainer.classList.add("image-crop-container");
      cropContainer.innerHTML = `
        <div class="image-container">
          <img id="image${i}" src="" alt="Select an image to crop">
        </div>
        <button class="crop-button" id="cropButton${i}">Crop Image ${i + 1}</button>
      `;
      selectedImagesContainer.appendChild(cropContainer);

      const image = cropContainer.querySelector(`#image${i}`);
      const cropButton = cropContainer.querySelector(`#cropButton${i}`);

      reader.onload = () => {
        image.src = reader.result;
        let cropper = new Cropper(image, {
          aspectRatio: 1,
          viewMode: 1,
        });

        cropButton.addEventListener("click", (event) => {
          event.preventDefault();
          if (cropper) {
            const canvas = cropper.getCroppedCanvas({
              width: 800, // Increased size for better quality
              height: 800, // Increased size for better quality
              imageSmoothingEnabled: true,
              imageSmoothingQuality: 'high',
            });
            const croppedImageDataURL = canvas.toDataURL('image/jpeg', 1.0); // Set quality to maximum
            image.src = croppedImageDataURL;
            const croppedImageFile = dataURLToFile(croppedImageDataURL, file.name);
            const currentFiles = Array.from(input.files);
            currentFiles[i] = croppedImageFile;

            const newFileList = createFileList(currentFiles);
            input.files = newFileList;
            cropper.destroy();
            cropper = null;
          } else {
            cropper = new Cropper(image, {
              aspectRatio: 1,
              viewMode: 1,
            });
          }
        });
      };
      reader.readAsDataURL(file);
    }
  }

  function dataURLToFile(dataUrl, filename) {
    const arr = dataUrl.split(",");
    const mime = arr[0].match(/:(.*?);/)[1];
    const bstr = atob(arr[1]);

    let n = bstr.length;
    const u8arr = new Uint8Array(n);
    while (n--) {
      u8arr[n] = bstr.charCodeAt(n);
    }

    return new File([u8arr], filename, { type: mime });
  }

  function createFileList(currentList) {
    const dataTransfer = new DataTransfer();
    currentList.forEach((file) => {
      dataTransfer.items.add(file);
    });
    return dataTransfer.files;
  }

  function addVariant() {
    const container = document.getElementById("variants-container");
    const newVariant = container.children[0].cloneNode(true);
    container.appendChild(newVariant);

    // Enable delete button for all variants except the first one
    const deleteButtons = container.querySelectorAll(".delete-variant");
    deleteButtons.forEach((button, index) => {
      button.disabled = index === 0;
    });
  }

  function removeVariant(button) {
    const container = document.getElementById("variants-container");
    const variantToRemove = button.closest(".variant");

    if (container.contains(variantToRemove) && container.children.length > 1) {
      container.removeChild(variantToRemove);

      // Enable delete button for all variants except the first one after removal
      const deleteButtons = container.querySelectorAll(".delete-variant");
      deleteButtons.forEach((button, index) => {
        button.disabled = index === 0;
      });
    }
  }

</script>


<script>
  let titleEl = document.getElementById("name");
  let message = document.getElementById("title-available1");
  let targetButton = document.getElementById("submit-btn");

  const sendDebounceTextToBackend = debounce((text) => {
    let url = "/admin/admin-add-product-check";
    (text = text.toUpperCase()),
      fetch(url, {
        method: "POST",
        body: JSON.stringify({
          text,
        }),
        headers: {
          "Content-Type": "application/json",
        },
      })
        .then((response) => {
          if (response.ok) {
            return response.json();
          } else {
            throw new Error("Network response was not ok.");
          }
        })
        .then((data) => {
          if (data.status) {
            message.innerHTML = data.message;
            message.style.color = "rgb(0, 255, 38)";
            targetButton.removeAttribute("disabled");
          } else {
            message.innerHTML = data.message;
            message.style.color = "red";
            targetButton.setAttribute("disabled", "disabled");
          }
        })
        .catch((error) => {
          console.error("Error sending data to backend:", error);
        });
  });

  titleEl.addEventListener("input", (e) => {
    sendDebounceTextToBackend(e.target.value);
  });

  function debounce(callback, delay = 1000) {
    let timeout;
    return (...args) => {
      clearTimeout(timeout);
      timeout = setTimeout(() => callback(...args), delay);
    };
  }
</script>

<%- include('../admin-partials/footer'); %>
